%name-prefix "veriloga"
%defines

%{
#define YYDEBUG 1
#include "admsVeriloga.h"

#define NEWVARIABLE(l) p_variableprototype myvariableprototype=adms_variableprototype_new(gModule,l,(p_adms)gBlockList->data);

inline static void   Y (p_yaccval myyaccval,p_adms myusrdata) {myyaccval->_usrdata=myusrdata;}
inline static p_adms YY(p_yaccval myyaccval)                  {return myyaccval->_usrdata;}
static char* gNatureAccess=NULL;
static p_number gNatureAbsTol=NULL;
static char* gNatureUnits=NULL;
static char* gNatureidt=NULL;
static char* gNatureddt=NULL;
static p_discipline gDiscipline=NULL;
static p_module gModule=NULL;
static p_analogfunction gAnalogfunction=NULL;
static p_module gInstanceModule=NULL;
static p_node gGND=NULL;
static p_source gSource=NULL;
static p_lexval gLexval=NULL;
static p_contribution gContribution=NULL;
static admse gVariableType=admse_real;
static admse gNodeDirection;
int uid=0;
static p_slist gVariableDeclarationList=NULL;
static p_slist gInstanceVariableList=NULL;
static p_slist gTerminalList=NULL;
static p_slist gBranchAliasList=NULL;
static p_slist gRangeList=NULL;
static p_slist gNodeList=NULL;
static p_slist gAttributeList=NULL;
static p_slist gGlobalAttributeList=NULL;
static p_slist gBlockList=NULL;
static p_slist gBlockVariableList=NULL;
static p_branchalias gBranchAlias=NULL;

static void adms_veriloga_message_fatal_continue(const p_lexval mytoken)
{
  adms_message_fatal_continue(("[%s:%i:%i]: at '%s':\n",mytoken->_f,mytoken->_l,mytoken->_c,mytoken->_string))
}
static void adms_veriloga_message_fatal (const char* message,const p_lexval mytoken)
{
  adms_veriloga_message_fatal_continue(mytoken);
  adms_message_fatal((message))
}
/*
inline static p_variableprototype variableprototype_recursive_lookup_by_id (p_adms myadms,p_lexval mylexval)
{
  if(myadms==(p_adms)gModule)
    return adms_module_list_variable_lookup_by_id(gModule,gModule,mylexval,(p_adms)gModule);
  else if(myadms==(p_adms)gAnalogfunction)
    return adms_analogfunction_list_variable_lookup_by_id(gAnalogfunction,gModule,mylexval,(p_adms)gAnalogfunction);
  else
  {
    p_slist l;
    for(l=((p_block)myadms)->_variable;l;l=l->next)
      if(!strcmp(((p_variableprototype)l->data)->_lexval->_string,mylexval->_string))
        return (p_variableprototype)l->data;
    return variableprototype_recursive_lookup_by_id((p_adms)((p_block)myadms)->_block,mylexval);
  }
}
*/
inline static p_variable variable_recursive_lookup_by_id (p_adms myadms,p_lexval mylexval)
{
  if(myadms==(p_adms)gModule)
  {
    p_variable myvariable=NULL;
    p_variableprototype myvariableprototype;
    if((myvariableprototype=adms_module_list_variable_lookup_by_id(gModule,gModule,mylexval,(p_adms)gModule)))
    {
      myvariable=adms_variable_new(myvariableprototype);
      adms_slist_push(&myvariableprototype->_instance,(p_adms)myvariable);
    }
    return myvariable;
  }
  else if(myadms==(p_adms)gAnalogfunction)
  {
    p_variable myvariable=NULL;
    p_variableprototype myvariableprototype;
    if((myvariableprototype=adms_analogfunction_list_variable_lookup_by_id(gAnalogfunction,gModule,mylexval,(p_adms)gAnalogfunction)))
    {
      myvariable=adms_variable_new(myvariableprototype);
      adms_slist_push(&myvariableprototype->_instance,(p_adms)myvariable);
    }
    return myvariable;
  }
  else
  {
    p_slist l;
    for(l=((p_block)myadms)->_variable;l;l=l->next)
      if(!strcmp(((p_variableprototype)l->data)->_lexval->_string,mylexval->_string))
      {
        p_variableprototype myvariableprototype=(p_variableprototype)l->data;
        p_variable myvariable=adms_variable_new(myvariableprototype);
        adms_slist_push(&myvariableprototype->_instance,(p_adms)myvariable);
        return myvariable;
      }
    return variable_recursive_lookup_by_id((p_adms)((p_block)myadms)->_block,mylexval);
  }
}
static p_nature lookup_nature(const char *myname)
{
  p_slist l;
  for(l=root()->_nature;l;l=l->next)
    if(!strcmp(((p_nature)l->data)->_name,myname))
      return (p_nature)l->data;
  return NULL;
}

%}

%left PREC_IF_THEN
%left tk_else

%union
{
  p_lexval _lexval;
  p_yaccval _yaccval;
}

R_admsParse
        | R_l.admsParse
        ;
R_l.admsParse
        | R_s.admsParse
        | R_l.admsParse R_s.admsParse
        ;
R_s.admsParse
        | R_d.module
        | R_discipline_member
        | R_nature_member
        ;
R_discipline_member
        | tk_discipline R_discipline_name R_l.discipline_assignment tk_enddiscipline
          _ adms_admsmain_list_discipline_prepend_once_or_abort(root(),gDiscipline);
          _ gDiscipline=NULL;
        ;
R_discipline_name
        | tk_ident
          _ gDiscipline=adms_discipline_new(mylexval1);
        ;
R_l.discipline_assignment
        | R_s.discipline_assignment
        | R_l.discipline_assignment R_s.discipline_assignment
        ;
R_s.discipline_assignment
        | tk_potential R_discipline.naturename ';'
          _ gDiscipline->_potential=(p_nature)YY($2);
        | tk_flow R_discipline.naturename ';'
          _ gDiscipline->_flow=(p_nature)YY($2);
        | tk_domain tk_ident ';'
          _ if(!strcmp(mylexval2,"discrete"))
          _   gDiscipline->_domain=admse_discrete;
          _ else if(!strcmp(mylexval2,"continuous"))
          _   gDiscipline->_domain=admse_continuous;
          _ else
          _  adms_veriloga_message_fatal("domain: bad value given - should be either 'discrete' or 'continuous'\n",$2);
        ;
R_discipline.naturename
        | tk_ident
          _ p_nature mynature=lookup_nature(mylexval1);
          _ if(!mynature)
          _   adms_veriloga_message_fatal("can't find nature definition\n",$1);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mynature);
        ;

R_nature_member
        | tk_nature tk_ident R_l.nature_assignment tk_endnature
          _ p_nature mynature=NULL;
          _ if(gNatureAccess) 
          _   mynature=adms_admsmain_list_nature_prepend_by_id_once_or_abort(root(),gNatureAccess);
          _ else
          _  adms_veriloga_message_fatal("attribute 'access' in nature definition not found\n",$2);
          _ adms_nature_valueto_name(mynature,mylexval2);
          _ if(gNatureidt) 
          _   adms_nature_valueto_idt_name(mynature,gNatureidt);
          _ if(gNatureddt) 
          _   adms_nature_valueto_ddt_name(mynature,gNatureddt);
          _ if(gNatureUnits)
          _   mynature->_units=gNatureUnits;
          _ if(gNatureAbsTol)
          _   mynature->_abstol=gNatureAbsTol;
          _ gNatureAccess=NULL;
          _ gNatureAbsTol=NULL;
          _ gNatureUnits=NULL;
          _ gNatureidt=NULL;
          _ gNatureddt=NULL;
        ;
R_l.nature_assignment
        | R_s.nature_assignment
        | R_l.nature_assignment R_s.nature_assignment
        ;
R_s.nature_assignment
        | tk_ident '=' tk_number ';'
          _ if(!strcmp($1->_string,"abstol"))
          _ {
          _   if(gNatureAbsTol)
          _     adms_veriloga_message_fatal("nature attribute defined more than once\n",$1);
          _   gNatureAbsTol=adms_number_new($3);
          _ }
          _ else
          _  adms_veriloga_message_fatal("unknown nature attribute\n",$1);
        | tk_ident '=' tk_number tk_ident ';'
          _ admse myunit=admse_1;
          _ if(!strcmp($1->_string,"abstol"))
          _ {
          _   if(gNatureAbsTol)
          _     adms_veriloga_message_fatal("nature attribute defined more than once\n",$1);
          _   gNatureAbsTol=adms_number_new($3);
          _ }
          _ else
          _  adms_veriloga_message_fatal("unknown nature attribute\n",$1);
          _ if(0) {}
          _ else if(!strcmp(mylexval4,"E")) myunit=admse_E;
          _ else if(!strcmp(mylexval4,"P")) myunit=admse_P;
          _ else if(!strcmp(mylexval4,"T")) myunit=admse_T;
          _ else if(!strcmp(mylexval4,"G")) myunit=admse_G;
          _ else if(!strcmp(mylexval4,"M")) myunit=admse_M;
          _ else if(!strcmp(mylexval4,"k")) myunit=admse_k;
          _ else if(!strcmp(mylexval4,"h")) myunit=admse_h;
          _ else if(!strcmp(mylexval4,"D")) myunit=admse_D;
          _ else if(!strcmp(mylexval4,"d")) myunit=admse_d;
          _ else if(!strcmp(mylexval4,"c")) myunit=admse_c;
          _ else if(!strcmp(mylexval4,"m")) myunit=admse_m;
          _ else if(!strcmp(mylexval4,"u")) myunit=admse_u;
          _ else if(!strcmp(mylexval4,"n")) myunit=admse_n;
          _ else if(!strcmp(mylexval4,"A")) myunit=admse_A;
          _ else if(!strcmp(mylexval4,"p")) myunit=admse_p;
          _ else if(!strcmp(mylexval4,"f")) myunit=admse_f;
          _ else if(!strcmp(mylexval4,"a")) myunit=admse_a;
          _ else
          _   adms_veriloga_message_fatal("can not convert symbol to valid unit\n",$4);
          _ gNatureAbsTol->_scalingunit=myunit;
        | tk_ident '=' tk_anystring ';'
          _ if(!strcmp($1->_string,"units"))
          _ {
          _   if(gNatureUnits)
          _     adms_veriloga_message_fatal("nature attribute defined more than once\n",$1);
          _   gNatureUnits=adms_kclone(mylexval3);
          _ }
          _ else
          _  adms_veriloga_message_fatal("unknown nature attribute\n",$1);
        | tk_ident '=' tk_ident ';'
          _ if(!strcmp($1->_string,"access"))
          _ {
          _   if(gNatureAccess)
          _     adms_veriloga_message_fatal("nature attribute defined more than once\n",$1);
          _   gNatureAccess=adms_kclone(mylexval3);
          _ }
          _ else if(!strcmp($1->_string,"idt_nature"))
          _ {
          _   if(gNatureidt)
          _     adms_veriloga_message_fatal("idt_nature attribute defined more than once\n",$1);
          _   gNatureidt=adms_kclone(mylexval3);
          _ }
          _ else if(!strcmp($1->_string,"ddt_nature"))
          _ {
          _   if(gNatureddt)
          _     adms_veriloga_message_fatal("ddt_nature attribute defined more than once\n",$1);
          _   gNatureddt=adms_kclone(mylexval3);
          _ }
          _ else
          _  adms_veriloga_message_fatal("unknown nature attribute\n",$1);
        ;
R_d.attribute.0
        |
        | R_d.attribute
        ;
R_d.attribute
        | tk_beginattribute R_l.attribute tk_endattribute
        | tk_beginattribute tk_anytext
          _ p_attribute myattribute=adms_attribute_new("ibm");
          _ p_admst myconstant=adms_admst_newks(adms_kclone(mylexval2));
          _ myattribute->_value=(p_adms)myconstant;
          _ adms_slist_push(&gAttributeList,(p_adms)myattribute);
        | tk_beginattribute tk_endattribute
        ;
R_l.attribute
        | R_s.attribute
        | R_l.attribute R_s.attribute
        ;
R_s.attribute
        | tk_ident '=' tk_anystring
          _ p_attribute myattribute=adms_attribute_new(mylexval1);
          _ p_admst myconstant=adms_admst_newks(adms_kclone(mylexval3));
          _ myattribute->_value=(p_adms)myconstant;
          _ adms_slist_push(&gAttributeList,(p_adms)myattribute);
        ;
R_d.module
        | R_d.attribute.0 tk_module tk_ident
          _ p_slist l;
          _ p_nodealias mynodealias;
          _ gModule=adms_admsmain_list_module_prepend_by_id_once_or_abort(root(),mylexval3); 
          _ adms_slist_push(&gBlockList,(p_adms)gModule);
          _ mynodealias=adms_module_list_nodealias_prepend_by_id_once_or_abort(gModule,gModule,"0"); 
          _ gGND=adms_module_list_node_prepend_by_id_once_or_abort(gModule,gModule,"GND"); 
          _ mynodealias->_node=gGND;
          _ gGND->_location=admse_ground;
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&gModule->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
        R_d.terminal R_modulebody tk_endmodule
          _ adms_slist_pull(&gBlockList);
          _ adms_slist_inreverse(&gModule->_assignment);
        ;
R_modulebody
        |
        | R_l.declaration
        | R_netlist
        | R_l.declaration R_netlist
        ;
R_netlist
        | R_analog
        | R_l.instance
        | R_l.instance R_analog
        | R_analog R_l.instance
        | R_l.instance R_analog R_l.instance
        ;
R_l.instance
        | R_s.instance
        | R_l.instance R_s.instance
        ;
R_d.terminal
        | '(' R_l.terminal.0  ')' R_d.attribute.0 ';'
          _ p_slist l;
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&gModule->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
        ;
R_l.terminal.0
        |
        | R_l.terminal
        ;
R_l.terminal
        | R_s.terminal
        | R_l.terminal ',' R_s.terminal
        ;
R_s.terminal
        | tk_ident
          _ p_nodealias mynodealias=adms_module_list_nodealias_prepend_by_id_once_or_abort(gModule,gModule,mylexval1); 
          _ p_node mynode=adms_module_list_node_prepend_by_id_once_or_abort(gModule,gModule,mylexval1); 
          _ mynodealias->_node=mynode;
          _ mynode->_location=admse_external;
        ;
R_l.declaration
        | R_s.declaration.withattribute
        | R_l.declaration R_s.declaration.withattribute
        ;
R_s.declaration.withattribute
        | R_s.declaration
        | R_d.attribute.global R_s.declaration
          _ adms_slist_free(gGlobalAttributeList); gGlobalAttributeList=NULL;
        ;
R_d.attribute.global
        | R_d.attribute
          _ gGlobalAttributeList=gAttributeList;
          _ gAttributeList=NULL;
        ;
R_s.declaration
        | R_d.node
        | R_d.branch
        | tk_parameter R_variable.type R_l.parameter R_d.variable.end
        | tk_parameter R_l.parameter R_d.variable.end
        | R_variable.type R_l.variable R_d.variable.end
        | R_d.aliasparameter
        | R_d.analogfunction
        | ';'
        ;
R_d.node
        | R_node.type R_l.terminalnode  ';'
          _ p_slist l;
          _ for(l=gTerminalList;l;l=l->next)
          _   ((p_node)l->data)->_direction=gNodeDirection;
          _ adms_slist_free(gTerminalList); gTerminalList=NULL;
        | tk_ground R_l.node  ';'
          _ p_slist l;
          _ for(l=gNodeList;l;l=l->next)
          _   ((p_node)l->data)->_location=admse_ground;
          _ adms_slist_free(gNodeList); gNodeList=NULL;
        | tk_ident R_l.node ';'
          _ char* mydisciplinename=mylexval1;
          _ p_discipline mydiscipline=adms_admsmain_list_discipline_lookup_by_id(root(),mydisciplinename);
          _ p_slist l;
          _ for(l=gNodeList;l;l=l->next)
          _   ((p_node)l->data)->_discipline=mydiscipline;
          _ adms_slist_free(gNodeList); gNodeList=NULL;
        ;
R_node.type
        | tk_input
          _ gNodeDirection=admse_input;
        | tk_output
          _ gNodeDirection=admse_output;
        | tk_inout
          _ gNodeDirection=admse_inout;
        ;
R_l.terminalnode
        | R_s.terminalnode
        | R_l.terminalnode ',' R_s.terminalnode
        ;
R_l.node
        | R_s.node
        | R_l.node ',' R_s.node
        ;
R_s.terminalnode
        | tk_ident R_d.attribute.0
          _ p_slist l;
          _ p_node mynode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval1);
          _ if(!mynode)
          _  adms_veriloga_message_fatal("terminal not found\n",$1);
          _ if(mynode->_location!=admse_external)
          _  adms_veriloga_message_fatal("node not a terminal\n",$1);
          _ adms_slist_push(&gTerminalList,(p_adms)mynode);
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&mynode->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&mynode->_attribute,l->data);
        ;
R_s.node
        | tk_ident R_d.attribute.0
          _ p_slist l;
          _ p_node mynode=adms_module_list_node_prepend_by_id_once_or_ignore(gModule,gModule,mylexval1);
          _ adms_slist_push(&gNodeList,(p_adms)mynode);
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&mynode->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&mynode->_attribute,l->data);
        ;
R_d.branch
        | tk_branch R_s.branch ';'
        ;
R_l.branchalias
        | R_s.branchalias
        | R_l.branchalias ',' R_s.branchalias
        ;
R_s.branchalias
        | tk_ident
          _ adms_slist_push(&gBranchAliasList,(p_adms)mylexval1);
        ;
R_s.branch
        | '(' tk_ident ',' tk_ident ')' R_l.branchalias
          _ p_slist l;
          _ p_branch mybranch; 
          _ p_node pnode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval2);
          _ p_node nnode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval4);
          _ mybranch=adms_module_list_branch_prepend_by_id_once_or_ignore(gModule,gModule,pnode,nnode); 
          _ if(!pnode)
          _  adms_veriloga_message_fatal("node never declared\n",$2);
          _ if(!nnode)
          _  adms_veriloga_message_fatal("node never declared\n",$4);
          _ for(l=gBranchAliasList;l;l=l->next)
          _ {
          _   char*aliasname=(char*)l->data;
          _   p_branchalias mybranchalias; 
          _   mybranchalias=adms_module_list_branchalias_prepend_by_id_once_or_abort(gModule,gModule,aliasname); 
          _   if(mybranchalias) mybranchalias->_branch=mybranch;
          _ }
          _ adms_slist_free(gBranchAliasList);
          _ gBranchAliasList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&mybranch->_attribute,l->data);
        | '(' tk_ident ')' R_l.branchalias
          _ p_slist l;
          _ p_branch mybranch;
          _ p_node pnode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval2);
          _ if(!pnode)
          _  adms_veriloga_message_fatal("node never declared\n",$2);
          _ mybranch=adms_module_list_branch_prepend_by_id_once_or_ignore(gModule,gModule,pnode,gGND); 
          _ for(l=gBranchAliasList;l;l=l->next)
          _ {
          _   char*aliasname=(char*)l->data;
          _   p_branchalias mybranchalias; 
          _   mybranchalias=adms_module_list_branchalias_prepend_by_id_once_or_abort(gModule,gModule,aliasname); 
          _   if(mybranchalias) mybranchalias->_branch=mybranch;
          _ }
          _ adms_slist_free(gBranchAliasList);
          _ gBranchAliasList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&mybranch->_attribute,l->data);
        ;
R_d.analogfunction
        | R_d.analogfunction.proto R_l.analogfunction.declaration R_analogcode.block tk_endfunction
          _ adms_slist_pull(&gBlockList);
          _ gAnalogfunction->_tree=YY($3);
          _ gAnalogfunction=NULL;
        ;
R_d.analogfunction.proto
        | tk_analog tk_function R_d.analogfunction.name ';'
          _ NEWVARIABLE(gAnalogfunction->_lexval)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_output=admse_yes;
        | tk_analog tk_function tk_integer R_d.analogfunction.name ';'
          _ NEWVARIABLE(gAnalogfunction->_lexval)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_output=admse_yes;
          _ myvariableprototype->_type=admse_integer;
          _ gAnalogfunction->_type=admse_integer; 
        | tk_analog tk_function tk_real R_d.analogfunction.name ';'
          _ NEWVARIABLE(gAnalogfunction->_lexval)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_output=admse_yes;
        ;
R_d.analogfunction.name
        | tk_ident
          _ p_slist l;
          _ gAnalogfunction=adms_analogfunction_new(gModule,$1);
          _ adms_slist_push(&gBlockList,(p_adms)gAnalogfunction);
          _ adms_module_list_analogfunction_prepend_once_or_abort(gModule,gAnalogfunction); 
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&gAnalogfunction->_attribute,l->data);
        ;
R_l.analogfunction.declaration
        | R_s.analogfunction.declaration
        | R_l.analogfunction.declaration R_s.analogfunction.declaration
        ;
R_s.analogfunction.declaration
        | tk_input R_l.analogfunction.input.variable ';'
        | tk_output R_l.analogfunction.output.variable ';'
        | tk_inout R_l.analogfunction.inout.variable ';'
        | tk_integer R_l.analogfunction.integer.variable ';'
        | tk_real R_l.analogfunction.real.variable ';'
        ;
R_l.analogfunction.input.variable
        | tk_ident
          _ NEWVARIABLE($1)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_input=admse_yes;
          _ myvariableprototype->_parametertype=admse_analogfunction;
        | R_l.analogfunction.input.variable ',' tk_ident
          _ NEWVARIABLE($3)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_input=admse_yes;
          _ myvariableprototype->_parametertype=admse_analogfunction;
        ;
R_l.analogfunction.output.variable
        | tk_ident
          _ NEWVARIABLE($1)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_output=admse_yes;
          _ myvariableprototype->_parametertype=admse_analogfunction;
        | R_l.analogfunction.output.variable ',' tk_ident
          _ NEWVARIABLE($3)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_output=admse_yes;
          _ myvariableprototype->_parametertype=admse_analogfunction;
        ;
R_l.analogfunction.inout.variable
        | tk_ident
          _ NEWVARIABLE($1)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_input=admse_yes;
          _ myvariableprototype->_output=admse_yes;
          _ myvariableprototype->_parametertype=admse_analogfunction;
        | R_l.analogfunction.inout.variable ',' tk_ident
          _ NEWVARIABLE($3)
          _ adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _ myvariableprototype->_input=admse_yes;
          _ myvariableprototype->_output=admse_yes;
          _ myvariableprototype->_parametertype=admse_analogfunction;
        ;
R_l.analogfunction.integer.variable
        | tk_ident
          _ p_variableprototype myvariableprototype=adms_analogfunction_list_variable_lookup_by_id(gAnalogfunction,gModule,$1,(p_adms)gAnalogfunction);
          _ if(myvariableprototype)
          _   myvariableprototype->_type=admse_integer;
          _ else
          _ {
          _   NEWVARIABLE($1)
          _   adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _   myvariableprototype->_type=admse_integer;
          _ }
        | R_l.analogfunction.integer.variable ',' tk_ident
          _ p_variableprototype myvariableprototype=adms_analogfunction_list_variable_lookup_by_id(gAnalogfunction,gModule,$3,(p_adms)gAnalogfunction);
          _ if(myvariableprototype)
          _   myvariableprototype->_type=admse_integer;
          _ else
          _ {
          _   NEWVARIABLE($3)
          _   adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _   myvariableprototype->_type=admse_integer;
          _ }
        ;
R_l.analogfunction.real.variable
        | tk_ident
          _ p_variableprototype myvariableprototype=adms_analogfunction_list_variable_lookup_by_id(gAnalogfunction,gModule,$1,(p_adms)gAnalogfunction);
          _ if(myvariableprototype)
          _   myvariableprototype->_type=admse_real;
          _ else
          _ {
          _   NEWVARIABLE($1)
          _   adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _   myvariableprototype->_type=admse_real;
          _ }
        | R_l.analogfunction.real.variable ',' tk_ident
          _ p_variableprototype myvariableprototype=adms_analogfunction_list_variable_lookup_by_id(gAnalogfunction,gModule,$3,(p_adms)gAnalogfunction);
          _ if(myvariableprototype)
          _   myvariableprototype->_type=admse_real;
          _ else
          _ {
          _   NEWVARIABLE($3)
          _   adms_analogfunction_list_variable_prepend_once_or_abort(gAnalogfunction,myvariableprototype); 
          _   myvariableprototype->_type=admse_real;
          _ }
        ;
R_variable.type
        | tk_integer R_d.attribute.0
          _ gVariableType=admse_integer;
          _ adms_slist_concat(&gGlobalAttributeList,gAttributeList);
          _ gAttributeList=NULL;
        | tk_real R_d.attribute.0
          _ gVariableType=admse_real;
          _ adms_slist_concat(&gGlobalAttributeList,gAttributeList);
          _ gAttributeList=NULL;
        | tk_string R_d.attribute.0
          _ gVariableType=admse_string;
          _ adms_slist_concat(&gGlobalAttributeList,gAttributeList);
          _ gAttributeList=NULL;
        ;
R_d.variable.end
        | ';'
          _ p_slist l;
          _ for(l=gVariableDeclarationList;l;l=l->next)
          _   ((p_variableprototype)l->data)->_type=gVariableType;
          _ adms_slist_free(gVariableDeclarationList); gVariableDeclarationList=NULL;
        ;
R_l.parameter
        | R_s.parameter
        | R_l.parameter ',' R_s.parameter
        ;
R_l.variable
        | R_s.variable
        | R_l.variable ',' R_s.variable
        ;
R_d.aliasparameter
        | R_d.aliasparameter.token tk_ident '=' tk_ident  R_d.attribute.0 ';'
          _ p_slist l;
          _ p_variableprototype myvariableprototype=adms_module_list_variable_lookup_by_id(gModule,gModule,$4,(p_adms)gModule);
          _ if(!myvariableprototype)
          _  adms_veriloga_message_fatal("variable never declared\n",$4);
          _ adms_variableprototype_list_alias_prepend_once_or_abort(myvariableprototype,adms_kclone(mylexval2));
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&myvariableprototype->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&myvariableprototype->_attribute,l->data);
        ;
R_d.aliasparameter.token
        | tk_aliasparameter
        | tk_aliasparam
        ;
R_s.parameter
        | R_s.parameter.name R_d.attribute.0
          _ p_slist l;
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&((p_variableprototype)gVariableDeclarationList->data)->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&((p_variableprototype)gVariableDeclarationList->data)->_attribute,l->data);
        ;
R_s.variable
        | R_s.variable.name R_d.attribute.0
          _ p_slist l;
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&((p_variableprototype)gVariableDeclarationList->data)->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ for(l=gGlobalAttributeList;l;l=l->next)
          _   adms_slist_push(&((p_variableprototype)gVariableDeclarationList->data)->_attribute,l->data);
        ;
R_s.parameter.name
        | R_s.variable.name '=' R_s.expression R_s.parameter.range
          _ ((p_variableprototype)gVariableDeclarationList->data)->_input=admse_yes;
          _ ((p_variableprototype)gVariableDeclarationList->data)->_default=((p_expression)YY($3));
          _ ((p_variableprototype)gVariableDeclarationList->data)->_range=adms_slist_reverse(gRangeList);
          _ gRangeList=NULL;
        | R_s.variable.name '=' '{' R_l.expression '}' R_s.parameter.range
          _ p_slist myArgs=(p_slist)YY($4);
          _ adms_slist_inreverse(&myArgs);
          _ ((p_variableprototype)gVariableDeclarationList->data)->_input=admse_yes;
          _ ((p_variableprototype)gVariableDeclarationList->data)->_default=((p_expression)myArgs->data);
          _ ((p_variableprototype)gVariableDeclarationList->data)->_arraydefault=myArgs;
          _ ((p_variableprototype)gVariableDeclarationList->data)->_range=adms_slist_reverse(gRangeList);
          _ gRangeList=NULL;
        ;
R_s.variable.name
        | tk_ident
          _ NEWVARIABLE($1)
          _ if(adms_module_list_node_lookup_by_id(gModule,gModule,mylexval1))
          _  adms_veriloga_message_fatal("variable already defined as node\n",$1);
          _ adms_module_list_variable_prepend_once_or_abort(gModule,myvariableprototype); 
          _ adms_slist_push(&gVariableDeclarationList,(p_adms)myvariableprototype);
        | tk_ident '[' tk_number ':' tk_number ']'
          _ NEWVARIABLE($1)
          _ if(adms_module_list_node_lookup_by_id(gModule,gModule,mylexval1))
          _  adms_veriloga_message_fatal("variable already defined as node\n",$1);
          _ adms_module_list_variable_prepend_once_or_abort(gModule,myvariableprototype); 
          _ adms_slist_push(&gVariableDeclarationList,(p_adms)myvariableprototype);
          _ myvariableprototype->_sizetype=admse_array;
          _ myvariableprototype->_minsize=adms_number_new($3);
          _ myvariableprototype->_maxsize=adms_number_new($5);
        ;
R_s.parameter.range
        |
        | R_l.interval
        ;
R_l.interval
        | R_s.interval
        | R_l.interval R_s.interval
        ;
R_s.interval
        | tk_from R_d.interval
          _ if(((p_range)YY($2))->_infboundtype==admse_range_bound_value)
          _   ((p_range)YY($2))->_type=admse_include_value;
          _ else
          _   ((p_range)YY($2))->_type=admse_include;
          _ adms_slist_push(&gRangeList,YY($2));
        | tk_exclude R_d.interval
          _ if(((p_range)YY($2))->_infboundtype==admse_range_bound_value)
          _   ((p_range)YY($2))->_type=admse_exclude_value;
          _ else
          _   ((p_range)YY($2))->_type=admse_exclude;
          _ adms_slist_push(&gRangeList,YY($2));
        ;
R_d.interval
        | '(' R_interval.inf ':' R_interval.sup ')'
          _ p_range myrange=adms_module_list_range_prepend_by_id_once_or_abort(gModule,gModule,(p_expression)YY($2),(p_expression)YY($4)); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myrange->_infboundtype=admse_range_bound_exclude;
          _ myrange->_supboundtype=admse_range_bound_exclude;
          _ Y($$,(p_adms)myrange);
        | '(' R_interval.inf ':' R_interval.sup ']'
          _ p_range myrange=adms_module_list_range_prepend_by_id_once_or_abort(gModule,gModule,(p_expression)YY($2),(p_expression)YY($4)); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myrange->_infboundtype=admse_range_bound_exclude;
          _ myrange->_supboundtype=admse_range_bound_include;
          _ Y($$,(p_adms)myrange);
        | '[' R_interval.inf ':' R_interval.sup ')'
          _ p_range myrange=adms_module_list_range_prepend_by_id_once_or_abort(gModule,gModule,(p_expression)YY($2),(p_expression)YY($4)); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myrange->_infboundtype=admse_range_bound_include;
          _ myrange->_supboundtype=admse_range_bound_exclude;
          _ Y($$,(p_adms)myrange);
        | '[' R_interval.inf ':' R_interval.sup ']'
          _ p_range myrange=adms_module_list_range_prepend_by_id_once_or_abort(gModule,gModule,(p_expression)YY($2),(p_expression)YY($4)); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myrange->_infboundtype=admse_range_bound_include;
          _ myrange->_supboundtype=admse_range_bound_include;
          _ Y($$,(p_adms)myrange);
        | R_s.expression
          _ p_range myrange=adms_module_list_range_prepend_by_id_once_or_abort(gModule,gModule,(p_expression)YY($1),(p_expression)YY($1)); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myrange->_infboundtype=admse_range_bound_value;
          _ myrange->_supboundtype=admse_range_bound_value;
          _ Y($$,(p_adms)myrange);
        ;
R_interval.inf
        | R_s.expression
          _ $$=$1;
        | '-' tk_inf
          _ p_number mynumber=adms_number_new($2); 
          _ p_expression myexpression=adms_expression_new(gModule,(p_adms)mynumber); 
          _ mynumber->_lexval->_string=adms_kclone("-inf");
          _ adms_slist_push(&gModule->_expression,(p_adms)myexpression); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myexpression->_infinity=admse_minus;
          _ myexpression->_hasspecialnumber=adms_kclone("YES");
          _ Y($$,(p_adms)myexpression);
        ;
R_interval.sup
        | R_s.expression
          _ $$=$1;
        | tk_inf
          _ p_number mynumber=adms_number_new($1); 
          _ p_expression myexpression=adms_expression_new(gModule,(p_adms)mynumber); 
          _ mynumber->_lexval->_string=adms_kclone("+inf");
          _ adms_slist_push(&gModule->_expression,(p_adms)myexpression); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myexpression->_infinity=admse_plus;
          _ myexpression->_hasspecialnumber=adms_kclone("YES");
          _ Y($$,(p_adms)myexpression);
        | '+' tk_inf
          _ p_number mynumber=adms_number_new($2); 
          _ p_expression myexpression=adms_expression_new(gModule,(p_adms)mynumber); 
          _ mynumber->_lexval->_string=adms_kclone("+inf");
          _ adms_slist_push(&gModule->_expression,(p_adms)myexpression); 
          _ $$=adms_yaccval_new("unknown source file");
          _ myexpression->_infinity=admse_plus;
          _ myexpression->_hasspecialnumber=adms_kclone("YES");
          _ Y($$,(p_adms)myexpression);
        ;
R_analog
        | tk_analog R_analogcode
          _ gModule->_analog=adms_analog_new(YY($2));
        ;
R_analogcode
        | R_analogcode.atomic
          _ $$=$1;
        | R_analogcode.block
          _ $$=$1;
        ;
R_l.expression
        | R_s.expression
          _ p_slist myArgs=NULL;
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_push(&myArgs,YY($1));
          _ Y($$,(p_adms)myArgs);
        | R_l.expression ',' R_s.expression
          _ p_slist myArgs=(p_slist)YY($1);
          _ $$=$1;
          _ adms_slist_push(&myArgs,YY($3));
          _ Y($$,(p_adms)myArgs);
        ;
R_analogcode.atomic
        | R_d.attribute.0 R_d.blockvariable
          _ p_slist l;
          _ p_slist lv;
          _ for(l=gAttributeList;l;l=l->next)
          _   for(lv=((p_blockvariable)YY($2))->_variable;lv;lv=lv->next)
          _     adms_slist_push(&((p_variableprototype)lv->data)->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ $$=$2;
        | R_d.contribution
          _ $$=$1;
        | R_s.assignment ';'
          _ $$=$1;
        | R_d.conditional
          _ $$=$1;
        | R_d.while
          _ $$=$1;
        | R_d.case
          _ $$=$1;
        | R_d.for
          _ $$=$1;
        | tk_dollar_ident '(' R_l.expression ')' ';'
          _ p_function myfunction=adms_function_new($1,uid++);
          _ p_slist myArgs=(p_slist)YY($3);
          _ p_callfunction mycallfunction=adms_callfunction_new(gModule,myfunction);
          _ adms_slist_push(&gModule->_callfunction,(p_adms)mycallfunction);
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_inreverse(&myArgs);
          _ myfunction->_arguments=myArgs;
          _ Y($$,(p_adms)mycallfunction);
        | tk_dollar_ident '(' ')' ';'
          _ p_function myfunction=adms_function_new($1,uid++);
          _ p_callfunction mycallfunction=adms_callfunction_new(gModule,myfunction);
          _ adms_slist_push(&gModule->_callfunction,(p_adms)mycallfunction);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mycallfunction);
        | tk_dollar_ident ';'
          _ p_function myfunction=adms_function_new($1,uid++);
          _ p_callfunction mycallfunction=adms_callfunction_new(gModule,myfunction);
          _ adms_slist_push(&gModule->_callfunction,(p_adms)mycallfunction);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mycallfunction);
        | ';'
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)adms_nilled_new(gModule));
        ;
R_analogcode.block
        | R_d.block
          _ $$=$1;
        | R_analogcode.block.atevent R_d.block
          _ $$=$2;
          _ adms_lexval_free(((p_block)YY($$))->_lexval);
          _ ((p_block)YY($$))->_lexval=(p_lexval)YY($1);
        ;
R_analogcode.block.atevent
        | '@' '(' tk_ident '(' R_l.analysis ')' ')'
          _ adms_veriloga_message_fatal("@ control not supported\n",$3);
        | '@' tk_ident
          _ char* mypartitionning=adms_kclone(mylexval2);
          _ if(strcmp(mypartitionning,"initial_model")
          _   && strcmp(mypartitionning,"initial_instance")
          _   && strcmp(mypartitionning,"noise")
          _   && strcmp(mypartitionning,"initial_step")
          _   && strcmp(mypartitionning,"final_step"))
          _   adms_veriloga_message_fatal(" @() control not supported\n",$2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)$2);
        | '@' '(' tk_ident ')'
          _ char* mypartitionning=adms_kclone(mylexval3);
          _ if(strcmp(mypartitionning,"initial_model")
          _   && strcmp(mypartitionning,"initial_instance")
          _   && strcmp(mypartitionning,"noise")
          _   && strcmp(mypartitionning,"initial_step")
          _   && strcmp(mypartitionning,"final_step"))
          _   adms_veriloga_message_fatal(" @() control not supported\n",$3);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)$3);
        ;
R_l.analysis
        | R_s.analysis
        | R_l.analysis ',' R_s.analysis
        ;
R_s.analysis
        | tk_anystring
        ;
R_d.block
        | R_d.block.begin tk_end
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,gBlockList->data);
          _ adms_slist_pull(&gBlockList);
        | R_d.block.begin ':' tk_ident tk_end
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,gBlockList->data);
          _ adms_slist_pull(&gBlockList);
          _ ((p_block)YY($$))->_lexval->_string=$3->_string;
        | R_d.block.begin R_l.blockitem tk_end
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,gBlockList->data);
          _ adms_slist_pull(&gBlockList);
        | R_d.block.begin ':' tk_ident R_l.blockitem tk_end
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,gBlockList->data);
          _ adms_slist_pull(&gBlockList);
          _ ((p_block)YY($$))->_lexval->_string=$3->_string;
        ;
R_d.block.begin
        | R_d.attribute.0 tk_begin
          _ p_slist l;
          _ p_block myblock=adms_block_new(gModule,$2,gBlockList?((p_block)gBlockList->data):NULL,NULL);
          _ $$=adms_yaccval_new("unknown source file");
          _ myblock->_lexval->_string=adms_kclone("");
          _ adms_slist_push(&gBlockList,(p_adms)myblock);
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&myblock->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ adms_slist_push(&gModule->_block,gBlockList->data);
        ;
R_l.blockitem
        | R_analogcode
          _ adms_slist_push(&((p_block)gBlockList->data)->_item,YY($1));
        | R_l.blockitem R_analogcode
          _ adms_slist_push(&((p_block)gBlockList->data)->_item,YY($2));
        ;
R_d.blockvariable
        | tk_integer R_l.blockvariable ';'
          _ p_slist l;
          _ p_blockvariable myblockvariable=adms_blockvariable_new(((p_block)gBlockList->data)); 
          _ adms_slist_push(&gModule->_blockvariable,(p_adms)myblockvariable); 
          _ for(l=gBlockVariableList;l;l=l->next)
          _   ((p_variableprototype)l->data)->_type=admse_integer;
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_inreverse(&gBlockVariableList);
          _ myblockvariable->_variable=gBlockVariableList;
          _ gBlockVariableList=NULL;
          _ Y($$,(p_adms)myblockvariable);
        | tk_real R_l.blockvariable ';'
          _ p_slist l;
          _ p_blockvariable myblockvariable=adms_blockvariable_new(((p_block)gBlockList->data)); 
          _ adms_slist_push(&gModule->_blockvariable,(p_adms)myblockvariable); 
          _ for(l=gBlockVariableList;l;l=l->next)
          _   ((p_variableprototype)l->data)->_type=admse_real;
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_inreverse(&gBlockVariableList);
          _ myblockvariable->_variable=gBlockVariableList;
          _ gBlockVariableList=NULL;
          _ Y($$,(p_adms)myblockvariable);
        | tk_string R_l.blockvariable ';'
          _ p_slist l;
          _ p_blockvariable myblockvariable=adms_blockvariable_new(((p_block)gBlockList->data)); 
          _ adms_slist_push(&gModule->_blockvariable,(p_adms)myblockvariable); 
          _ for(l=gBlockVariableList;l;l=l->next)
          _   ((p_variableprototype)l->data)->_type=admse_string;
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_inreverse(&gBlockVariableList);
          _ myblockvariable->_variable=gBlockVariableList;
          _ gBlockVariableList=NULL;
          _ Y($$,(p_adms)myblockvariable);
        ;
R_l.blockvariable
        | R_s.blockvariable
        | R_l.blockvariable ',' R_s.blockvariable
        ;
R_s.blockvariable
        | tk_ident
          _ NEWVARIABLE($1)
          _ adms_block_list_variable_prepend_once_or_abort(((p_block)gBlockList->data),myvariableprototype); 
          _ adms_slist_push(&gBlockVariableList,(p_adms)myvariableprototype);
        | tk_ident '[' tk_number ':' tk_number ']'
          _ NEWVARIABLE($1)
          _ adms_block_list_variable_prepend_once_or_abort(((p_block)gBlockList->data),myvariableprototype); 
          _ adms_slist_push(&gVariableDeclarationList,(p_adms)myvariableprototype);
          _ myvariableprototype->_sizetype=admse_array;
          _ myvariableprototype->_minsize=adms_number_new($3);
          _ myvariableprototype->_maxsize=adms_number_new($5);
        ;
R_d.contribution
        | R_contribution R_d.attribute.0 ';'
          _ p_slist l;
          _ for(l=gAttributeList;l;l=l->next)
          _   adms_slist_push(&gContribution->_attribute,l->data);
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ gContribution=NULL;
        ;
R_contribution
        | R_source '<' '+' R_s.expression 
          _ p_source mysource=(p_source)YY($1);
          _ $$=adms_yaccval_new("unknown source file");
          _ gContribution=adms_contribution_new(gModule,mysource,(p_expression)YY($4),gLexval);
          _ adms_slist_push(&gModule->_contribution,(p_adms)gContribution);
          _ Y($$,(p_adms)gContribution);
          _ gContribution->_branchalias=gBranchAlias;
          _ gBranchAlias=NULL;
        ;
R_source
        | tk_ident '(' tk_ident ',' tk_ident ')'
          _ p_node Pnode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval3);
          _ p_node Nnode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval5);
          _ char* natureID=mylexval1;
          _ p_nature mynature=adms_admsmain_list_nature_lookup_by_id(root(),natureID);
          _ p_branch mybranch=adms_module_list_branch_prepend_by_id_once_or_ignore(gModule,gModule,Pnode,Nnode);
          _ $$=adms_yaccval_new("unknown source file");
          _ if(!mynature)
          _  adms_message_fatal(("[source:error] there is no nature with access %s, missing discipline.h file?\n",natureID))
          _ gSource=adms_module_list_source_prepend_by_id_once_or_ignore(gModule,gModule,mybranch,mynature);
          _ gLexval=$1;
          _ Y($$,(p_adms)gSource);
        | tk_ident '(' tk_ident ')'
          _ char* natureID=mylexval1;
          _ p_nature mynature=adms_admsmain_list_nature_lookup_by_id(root(),natureID);
          _ p_branchalias branchalias=adms_module_list_branchalias_lookup_by_id(gModule,gModule,mylexval3);
          _ p_node pnode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval3);
          _ p_branch mybranch=NULL;
          _ $$=adms_yaccval_new("unknown source file");
          _ if(!mynature)
          _  adms_message_fatal(("[source:error] there is no nature with access %s, please, include discipline.h file\n",natureID))
          _ if(pnode)
          _   mybranch=adms_module_list_branch_prepend_by_id_once_or_ignore(gModule,gModule,pnode,gGND);
          _ else if(branchalias)
          _   mybranch=branchalias->_branch;
          _ else
          _   adms_veriloga_message_fatal("undefined branch or node\n",$1);
          _ gSource=adms_module_list_source_prepend_by_id_once_or_ignore(gModule,gModule,mybranch,mynature);
          _ gLexval=$1;
          _ gBranchAlias=branchalias;
          _ Y($$,(p_adms)gSource);
        ;
R_d.while
        | tk_while '(' R_s.expression ')' R_analogcode
          _ p_whileloop mywhileloop=adms_whileloop_new(gModule,(p_expression)YY($3),YY($5));
          _ adms_slist_push(&gModule->_whileloop,(p_adms)mywhileloop);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mywhileloop);
        ;
R_d.for
        | tk_for '(' R_s.assignment ';' R_s.expression ';' R_s.assignment ')' R_analogcode
          _ p_forloop myforloop=adms_forloop_new(gModule,(p_assignment)YY($3),(p_expression)YY($5),(p_assignment)YY($7),YY($9));
          _ adms_slist_push(&gModule->_forloop,(p_adms)myforloop);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myforloop);
        ;
R_d.case
        | tk_case '(' R_s.expression ')' R_l.case.item tk_endcase
          _ p_case mycase=adms_case_new(gModule,(p_expression)YY($3));
          _ adms_slist_push(&gModule->_case,(p_adms)mycase);
          _ $$=adms_yaccval_new("unknown source file");
          _ mycase->_caseitem=adms_slist_reverse((p_slist)YY($5));
          _ Y($$,(p_adms)mycase);
        ;
R_l.case.item
        | R_s.case.item
          _ p_slist myArgs=NULL;
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_push(&myArgs,YY($1));
          _ Y($$,(p_adms)myArgs);
        | R_l.case.item R_s.case.item
          _ p_slist myArgs=(p_slist)YY($1);
          _ $$=$1;
          _ adms_slist_push(&myArgs,YY($2));
          _ Y($$,(p_adms)myArgs);
        ;
R_s.case.item
        | R_l.enode ':' R_analogcode
          _ p_slist myArgs=(p_slist)YY($1);
          _ p_caseitem mycaseitem=adms_caseitem_new(YY($3));
          _ $$=adms_yaccval_new("unknown source file");
          _ mycaseitem->_condition=adms_slist_reverse(myArgs);
          _ Y($$,(p_adms)mycaseitem);
        | tk_default ':' R_analogcode
          _ p_caseitem mycaseitem=adms_caseitem_new(YY($3));
          _ $$=adms_yaccval_new("unknown source file");
          _ mycaseitem->_defaultcase=admse_yes;
          _ Y($$,(p_adms)mycaseitem);
        | tk_default R_analogcode
          _ p_caseitem mycaseitem=adms_caseitem_new(YY($2));
          _ $$=adms_yaccval_new("unknown source file");
          _ mycaseitem->_defaultcase=admse_yes;
          _ Y($$,(p_adms)mycaseitem);
        ;
R_s.instance
        | R_instance.module.name '#' '(' R_l.instance.parameter ')' tk_ident '(' R_l.node ')' ';'
          _ p_instance myinstance;
          _ p_slist l1;
          _ p_slist l2;
          _ myinstance=adms_module_list_instance_prepend_by_id_once_or_abort(gModule,gModule,gInstanceModule,mylexval6);
          _ adms_slist_inreverse(&gInstanceModule->_node);
          _ l2=gInstanceModule->_node;
          _ l2=l2->next; /*GND ignored*/
          _ for(l1=adms_slist_reverse(gNodeList);l1;l1=l1->next)
          _ {
          _   adms_instance_list_terminal_prepend_once_or_abort(myinstance,adms_instancenode_new(((p_node)l1->data),(p_node)l2->data));
          _   l2=l2->next;
          _ }
          _ for(l1=gInstanceVariableList;l1;l1=l1->next)
          _   adms_instance_list_parameterset_prepend_once_or_abort(myinstance,(p_instanceparameter)l1->data);
          _ adms_slist_inreverse(&gInstanceModule->_node);
          _ adms_slist_free(gNodeList);gNodeList=NULL;
          _ adms_slist_free(gInstanceVariableList);gInstanceVariableList=NULL;
        ;
R_instance.module.name
        | tk_ident
          _ gInstanceModule=adms_admsmain_list_module_lookup_by_id(root(),mylexval1);
          _ if(!gInstanceModule)
          _   adms_message_fatal(("module '%s' not found\n",mylexval1));
        ;
R_l.instance.parameter
        | R_s.instance.parameter
        | R_l.instance.parameter ',' R_s.instance.parameter
        ;
R_s.instance.parameter
        | '.' tk_ident '(' R_s.expression ')'
          _ p_variableprototype myvariableprototype=adms_module_list_variable_lookup_by_id(gInstanceModule,gInstanceModule,$2,(p_adms)gInstanceModule);
          _ if(myvariableprototype)
          _ {
          _   p_instanceparameter myinstanceparameter;
          _   myinstanceparameter=adms_instanceparameter_new(myvariableprototype);
          _   adms_slist_push(&gInstanceVariableList,(p_adms)myinstanceparameter);
          _   myinstanceparameter->_value=((p_expression)YY($4));
          _ }
          _ else
          _ {
          _   adms_veriloga_message_fatal_continue($2);
          _   adms_message_fatal(("[%s.%s.%s]: undefined variable (instance declaration)",
          _     adms_module_uid(gModule),adms_module_uid(gInstanceModule),mylexval2))
          _ }
        ;
R_s.assignment
        | tk_ident '=' R_s.expression
          _ p_assignment myassignment;
          _ p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$1);
          _ p_variableprototype myvariableprototype;
          _ if(!myvariable)
          _   adms_veriloga_message_fatal("undefined variable\n",$1);
          _ myvariableprototype=myvariable->_prototype;
          _ myassignment=adms_assignment_new(gModule,(p_adms)myvariable,(p_expression)YY($3),$1);
          _ adms_slist_push(&gModule->_assignment,(p_adms)myassignment);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myassignment);
          _ myvariableprototype->_vcount++;
          _ myvariableprototype->_vlast=myassignment;
        | R_d.attribute tk_ident '=' R_s.expression
          _ p_assignment myassignment;
          _ p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$2);
          _ p_variableprototype myvariableprototype;
          _ if(!myvariable)
          _   adms_veriloga_message_fatal("undefined variable\n",$2);
          _ myvariableprototype=myvariable->_prototype;
          _ myassignment=adms_assignment_new(gModule,(p_adms)myvariable,(p_expression)YY($4),$2);
          _ adms_slist_push(&gModule->_assignment,(p_adms)myassignment);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myassignment);
          _ {
          _   p_slist l;
          _   for(l=gAttributeList;l;l=l->next)
          _     adms_slist_push(&myassignment->_attribute,l->data);
          _ }
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ myvariableprototype->_vcount++;
          _ myvariableprototype->_vlast=myassignment;
        | tk_ident '[' R_expression ']' '=' R_s.expression
          _ p_assignment myassignment;
          _ p_array myarray;
          _ p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$1);
          _ p_variableprototype myvariableprototype;
          _ if(!myvariable)
          _   adms_veriloga_message_fatal("undefined variable\n",$1);
          _ myvariableprototype=myvariable->_prototype;
          _ myarray=adms_array_new(myvariable,YY($3));
          _ myassignment=adms_assignment_new(gModule,(p_adms)myarray,(p_expression)YY($6),$1);
          _ adms_slist_push(&gModule->_assignment,(p_adms)myassignment);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myassignment);
          _ myvariableprototype->_vcount++;
          _ myvariableprototype->_vlast=myassignment;
        | R_d.attribute tk_ident '[' R_expression ']' '=' R_s.expression
          _ p_assignment myassignment;
          _ p_array myarray;
          _ p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$2);
          _ p_variableprototype myvariableprototype;
          _ if(!myvariable)
          _   adms_veriloga_message_fatal("undefined variable\n",$2);
          _ myvariableprototype=myvariable->_prototype;
          _ myarray=adms_array_new(myvariable,YY($4));
          _ myassignment=adms_assignment_new(gModule,(p_adms)myarray,(p_expression)YY($7),$2);
          _ adms_slist_push(&gModule->_assignment,(p_adms)myassignment);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myassignment);
          _ {
          _   p_slist l;
          _   for(l=gAttributeList;l;l=l->next)
          _     adms_slist_push(&myassignment->_attribute,l->data);
          _ }
          _ adms_slist_free(gAttributeList); gAttributeList=NULL;
          _ myvariableprototype->_vcount++;
          _ myvariableprototype->_vlast=myassignment;
        ;
R_d.conditional
        | tk_if '(' R_s.expression ')' R_analogcode %prec PREC_IF_THEN
          _ p_expression myexpression=(p_expression)YY($3);
          _ p_adms mythen=YY($5);
          _ p_conditional myconditional=adms_conditional_new(gModule,myexpression,mythen,NULL);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myconditional);
        | tk_if '(' R_s.expression ')' R_analogcode tk_else R_analogcode
          _ p_expression myexpression=(p_expression)YY($3);
          _ p_adms mythen=YY($5);
          _ p_adms myelse=YY($7);
          _ p_conditional myconditional=adms_conditional_new(gModule,myexpression,mythen,myelse);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myconditional);
        ;
R_s.expression
        | R_expression
          _ p_expression myexpression=adms_expression_new(gModule,YY($1)); 
          _ adms_slist_push(&gModule->_expression,(p_adms)myexpression); 
          _ $$=$1;
          _ Y($$,(p_adms)myexpression);
        ;
R_l.enode
        | R_s.function_expression
          _ p_slist myArgs=NULL;
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_push(&myArgs,YY($1));
          _ Y($$,(p_adms)myArgs);
        | R_l.enode ',' R_s.function_expression
          _ p_slist myArgs=(p_slist)YY($1);
          _ $$=$1;
          _ adms_slist_push(&myArgs,YY($3));
          _ Y($$,(p_adms)myArgs);
        ;
R_s.function_expression
        | R_expression
          _ $$=$1;
        ;
R_expression
        | R_e.conditional
          _ $$=$1;
        ;
R_e.conditional
        | R_e.bitwise_equ
          _ $$=$1;
        | R_e.bitwise_equ '?' R_e.bitwise_equ ':' R_e.bitwise_equ
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_adms m3=YY($5);
          _ p_mapply_ternary myop=adms_mapply_ternary_new(admse_conditional,m1,m2,m3);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.bitwise_equ
        | R_e.bitwise_xor
          _ $$=$1;
        | R_e.bitwise_equ tk_bitwise_equr R_e.bitwise_xor
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_bw_equr,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.bitwise_equ '~' '^' R_e.bitwise_xor
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($4);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_bw_equl,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.bitwise_xor
        | R_e.bitwise_or
          _ $$=$1;
        | R_e.bitwise_xor '^' R_e.bitwise_or
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_bw_xor,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.bitwise_or
        | R_e.bitwise_and
          _ $$=$1;
        | R_e.bitwise_or '|' R_e.bitwise_and
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_bw_or,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.bitwise_and
        | R_e.logical_or
          _ $$=$1;
        | R_e.bitwise_and '&' R_e.logical_or
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_bw_and,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.logical_or
        | R_e.logical_and
          _ $$=$1;
        | R_e.logical_or tk_or R_e.logical_and
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_or,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.logical_and
        | R_e.comp_equ
          _ $$=$1;
        | R_e.logical_and tk_and R_e.comp_equ
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_and,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.comp_equ
        | R_e.comp
          _ $$=$1;
        | R_e.comp_equ '=' '=' R_e.comp
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($4);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_equ,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.comp_equ '!' '=' R_e.comp
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($4);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_notequ,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.comp
        | R_e.bitwise_shift
          _ $$=$1;
        | R_e.comp '<' R_e.bitwise_shift
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_lt,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.comp '<' '=' R_e.bitwise_shift
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($4);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_lt_equ,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.comp '>' R_e.bitwise_shift
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_gt,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.comp '>' '=' R_e.bitwise_shift
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($4);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_gt_equ,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.bitwise_shift
        | R_e.arithm_add
          _ $$=$1;
        | R_e.bitwise_shift tk_op_shr R_e.arithm_add
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_shiftr,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.bitwise_shift tk_op_shl R_e.arithm_add
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_shiftl,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.arithm_add
        | R_e.arithm_mult
          _ $$=$1;
        | R_e.arithm_add '+' R_e.arithm_mult
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_addp,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.arithm_add '-' R_e.arithm_mult
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_addm,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.arithm_mult
        | R_e.unary
          _ $$=$1;
        | R_e.arithm_mult '*' R_e.unary
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_multtime,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.arithm_mult '/' R_e.unary
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_multdiv,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        | R_e.arithm_mult '%' R_e.unary
          _ p_adms m1=YY($1);
          _ p_adms m2=YY($3);
          _ p_mapply_binary myop=adms_mapply_binary_new(admse_multmod,m1,m2);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myop);
        ;
R_e.unary
        | R_e.atomic
          _ $$=$1;
        | '+' R_e.atomic
          _ p_adms m=YY($2);
          _ p_mapply_unary mymathapply=adms_mapply_unary_new(admse_plus,m);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mymathapply);
        | '-' R_e.atomic
          _ p_adms m=YY($2);
          _ p_mapply_unary mymathapply=adms_mapply_unary_new(admse_minus,m);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mymathapply);
        | '!' R_e.atomic
          _ p_adms m=YY($2);
          _ p_mapply_unary mymathapply=adms_mapply_unary_new(admse_not,m);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mymathapply);
        | '~' R_e.atomic
          _ p_adms m=YY($2);
          _ p_mapply_unary mymathapply=adms_mapply_unary_new(admse_bw_not,m);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)mymathapply);
        ;
R_e.atomic
        | tk_integer
          _ p_number mynumber=adms_number_new($1);
          _ $$=adms_yaccval_new("unknown source file");
          _ mynumber->_cast=admse_i;
          _ Y($$,(p_adms)mynumber);
        | tk_integer tk_ident
          _ p_number mynumber=adms_number_new($1);
          _ int myunit=admse_1;
          _ $$=adms_yaccval_new("unknown source file");
          _ if(0) {}
          _ else if(!strcmp(mylexval2,"E")) myunit=admse_E;
          _ else if(!strcmp(mylexval2,"P")) myunit=admse_P;
          _ else if(!strcmp(mylexval2,"T")) myunit=admse_T;
          _ else if(!strcmp(mylexval2,"G")) myunit=admse_G;
          _ else if(!strcmp(mylexval2,"M")) myunit=admse_M;
          _ else if(!strcmp(mylexval2,"k")) myunit=admse_k;
          _ else if(!strcmp(mylexval2,"h")) myunit=admse_h;
          _ else if(!strcmp(mylexval2,"D")) myunit=admse_D;
          _ else if(!strcmp(mylexval2,"d")) myunit=admse_d;
          _ else if(!strcmp(mylexval2,"c")) myunit=admse_c;
          _ else if(!strcmp(mylexval2,"m")) myunit=admse_m;
          _ else if(!strcmp(mylexval2,"u")) myunit=admse_u;
          _ else if(!strcmp(mylexval2,"n")) myunit=admse_n;
          _ else if(!strcmp(mylexval2,"A")) myunit=admse_A;
          _ else if(!strcmp(mylexval2,"p")) myunit=admse_p;
          _ else if(!strcmp(mylexval2,"f")) myunit=admse_f;
          _ else if(!strcmp(mylexval2,"a")) myunit=admse_a;
          _ else
          _   adms_veriloga_message_fatal(" can not convert symbol to valid unit\n",$2);
          _ mynumber->_scalingunit=myunit;
          _ mynumber->_cast=admse_i;
          _ Y($$,(p_adms)mynumber);
        | tk_number
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)adms_number_new($1));
        | tk_number tk_ident
          _ p_number mynumber=adms_number_new($1);
          _ int myunit=admse_1;
          _ $$=adms_yaccval_new("unknown source file");
          _ if(0) {}
          _ else if(!strcmp(mylexval2,"E")) myunit=admse_E;
          _ else if(!strcmp(mylexval2,"P")) myunit=admse_P;
          _ else if(!strcmp(mylexval2,"T")) myunit=admse_T;
          _ else if(!strcmp(mylexval2,"G")) myunit=admse_G;
          _ else if(!strcmp(mylexval2,"M")) myunit=admse_M;
          _ else if(!strcmp(mylexval2,"k")) myunit=admse_k;
          _ else if(!strcmp(mylexval2,"h")) myunit=admse_h;
          _ else if(!strcmp(mylexval2,"D")) myunit=admse_D;
          _ else if(!strcmp(mylexval2,"d")) myunit=admse_d;
          _ else if(!strcmp(mylexval2,"c")) myunit=admse_c;
          _ else if(!strcmp(mylexval2,"m")) myunit=admse_m;
          _ else if(!strcmp(mylexval2,"u")) myunit=admse_u;
          _ else if(!strcmp(mylexval2,"n")) myunit=admse_n;
          _ else if(!strcmp(mylexval2,"A")) myunit=admse_A;
          _ else if(!strcmp(mylexval2,"p")) myunit=admse_p;
          _ else if(!strcmp(mylexval2,"f")) myunit=admse_f;
          _ else if(!strcmp(mylexval2,"a")) myunit=admse_a;
          _ else
          _   adms_veriloga_message_fatal(" can not convert symbol to valid unit\n",$2);
          _ mynumber->_scalingunit=myunit;
          _ Y($$,(p_adms)mynumber);
        | tk_char
          _ adms_veriloga_message_fatal("%s: character are not handled\n",$1);
        | tk_anystring
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)adms_string_new(mylexval1));
        | tk_ident
          _ $$=adms_yaccval_new("unknown source file");
          _ if(gAnalogfunction)
          _ {
          _   p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$1);
          _   if(myvariable)
          _     Y($$,(p_adms)myvariable);
          _ }
          _ else
          _ {
          _   p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$1);
          _   if(myvariable)
          _     Y($$,(p_adms)myvariable);
          _   else
          _   {
          _     p_branchalias mybranchalias=adms_module_list_branchalias_lookup_by_id(gModule,gModule,mylexval1);
          _     p_node mynode=adms_module_list_node_lookup_by_id(gModule,gModule,mylexval1);
          _     if(mynode) Y($$,(p_adms)mynode);
          _     if(mybranchalias)
          _       Y($$,(p_adms)mybranchalias->_branch);
          _   }
          _ }
          _ if(!YY($$))
          _   adms_veriloga_message_fatal("identifier never declared\n",$1);
        | tk_dollar_ident
          _ p_function myfunction=adms_function_new($1,uid++);
          _ $$=adms_yaccval_new("unknown source file");
          _ Y($$,(p_adms)myfunction);
        | tk_ident '[' R_expression ']'
          _ $$=adms_yaccval_new("unknown source file");
          _ p_variable myvariable=variable_recursive_lookup_by_id(gBlockList->data,$1);
          _ if(!myvariable)
          _    adms_veriloga_message_fatal("undefined array variable\n",$1);
          _ Y($$,(p_adms)adms_array_new(myvariable,YY($3)));
        | tk_dollar_ident '(' R_l.enode ')'
          _ p_function myfunction=adms_function_new($1,uid++);
          _ p_slist myArgs=(p_slist)YY($3);
          _ $$=adms_yaccval_new("unknown source file");
          _ adms_slist_inreverse(&myArgs);
          _ myfunction->_arguments=myArgs;
          _ Y($$,(p_adms)myfunction);
        | tk_ident '(' R_l.enode ')'
          _ char* myfunctionname=mylexval1;
          _ p_slist myArgs=(p_slist)YY($3);
          _ int narg=adms_slist_length(myArgs);
          _ p_probe myprobe=NULL;
          _ p_nature mynature=adms_admsmain_list_nature_lookup_by_id(root(),myfunctionname);
          _ $$=adms_yaccval_new("unknown source file");
          _ if(mynature && narg==1)
          _ {
          _   p_adms mychild0=(p_adms)adms_slist_nth_data(myArgs,0);
          _   if(mychild0->_datatypename==admse_node)
          _   {
          _     p_branch mybranch=adms_module_list_branch_prepend_by_id_once_or_ignore(gModule,gModule,(p_node)mychild0,gGND);
          _     myprobe=adms_module_list_probe_prepend_by_id_once_or_ignore(gModule,gModule,mybranch,mynature);
          _   }
          _   else if(mychild0->_datatypename==admse_branch)
          _   {
          _     myprobe=adms_module_list_probe_prepend_by_id_once_or_ignore(gModule,gModule,(p_branch)mychild0,mynature);
          _   }
          _   else
          _     adms_veriloga_message_fatal("bad argument (expecting node or branch)\n",$1);
          _ }
          _ else if(mynature && narg==2)
          _ {
          _   p_adms mychild0=(p_adms)adms_slist_nth_data(myArgs,0);
          _   p_adms mychild1=(p_adms)adms_slist_nth_data(myArgs,1);
          _   p_branch mybranch;
          _   if(mychild0->_datatypename!=admse_node)
          _     adms_veriloga_message_fatal("second argument of probe is not a node\n",$1);
          _   if(mychild1->_datatypename!=admse_node)
          _     adms_veriloga_message_fatal("first argument of probe is not a node\n",$1);
          _   mybranch=adms_module_list_branch_prepend_by_id_once_or_ignore(gModule,gModule,(p_node)mychild1,((p_node)mychild0));
          _   myprobe=adms_module_list_probe_prepend_by_id_once_or_ignore(gModule,gModule,mybranch,mynature);
          _ }
          _ if(myprobe)
          _   Y($$,(p_adms)myprobe);
          _ else
          _ {
          _   p_slist l;
          _   p_function myfunction=adms_function_new($1,uid++);
          _   for(l=gModule->_analogfunction;l&&(myfunction->_definition==NULL);l=l->next)
          _   {
          _     p_analogfunction myanalogfunction=(p_analogfunction)l->data;
          _     if(!strcmp($1->_string,myanalogfunction->_lexval->_string))
          _       myfunction->_definition=myanalogfunction;
          _   }
          _   myfunction->_arguments=adms_slist_reverse(myArgs);
          _   Y($$,(p_adms)myfunction);
          _ }
        | '(' R_expression ')'
          _ $$=$2;
        ;
%%
void adms_veriloga_setint_yydebug(const int val)
{
  yydebug=val;
}
